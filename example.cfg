logpath = "warren.log"

# Some sections in this file are Prometheus client options directly exposed to
# configuration by TOML.
#
# CounterOpts: https://godoc.org/github.com/prometheus/client_golang/prometheus#CounterOpts
# GaugeOpts: https://godoc.org/github.com/prometheus/client_golang/prometheus#GaugeOpts
# HistogramOpts: https://godoc.org/github.com/prometheus/client_golang/prometheus#HistogramOpts

# Configure the serving of metrics for Prometheus.
# See http://prometheus.io/ for the monitoring server that collects this data.
[prometheus]
# Serve on this HTTP URL path.
handlerpath = "/metrics"
# Serve on this host:port.
serveaddr = "localhost:9000"

[system]
filesystems = ["/", "/home"]
# Apply custom labels to the system collector.
[system.labels]
job = "hosts"
host = "myhostname"
# CPU data for the host.
[system.cpu]
# Should host_cpu_combined_seconds be output.
combined = true
# Should host_cpu_by_core_seconds be output.
bycore = true
# CPU states to output, allowed values:
# user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice
states = ["user", "system", "iowait"]

# Monitors local systemd.
[systemd]
# How to connect to systemd. Options are: "dbus" (default) and "direct".
conn_type = "dbus"
[systemd.const_labels]
job = "systemd"

[[currentcost]]
device = "/dev/ttyUSB0"
# Apply custom labels to the CurrentCost collector.
[currentcost.labels]
job = "power"
[currentcost.sensor.1]
# Set label sensor="foo" on sensor 1, which would otherwise be sensor="1".
name = "foo"

# Equivalent of `tail -F` on a file, and counting various events (via matching
# re2 regexps against lines).
[[file]]
# The file to tail/follow.
file = "/var/log/syslog"
# Multiple Prometheus variables can be specified. name and help are required.
[[file.var]] # CounterOpts
name = "cron_event_count"
help = "Crontab events (count)"
# names/keys for labels to differentiate events.
labelnames = ["user", "type"]
# Each variable can have multiple matchers for event types that contribute to
# it.
[[file.var.match]]
# The re2 pattern to match lines.
pattern = 'CROND\[[0-9]+\]: \((?P<user>[^)]+)\) (?P<type>[^ ]+)'
# values for labels on this matching event type. ${name} ${1} is expanded with
# matching subgroups in the pattern. See
# https://golang.org/pkg/regexp/#Regexp.Expand for details.
labelvalues = ["${user}", "${type}"]

# Reads stdout and/or stderr from a spawned process and counts events,
# similarly to [[file]].
[[proc]]
# The argv for the command, including the command name/path as the first item.
command = ["/usr/bin/journalctl", "--unit=someunit", "--follow", "--lines=0"]
# Optional directory to chdir to prior to execing the command.
dir = "/"
# If the process exits, retry starting it after this length of time. Defaults
# to 30s.
retryinterval = "5s"
# Same as for [[file]], but on the command's stdout.
[[proc.stdout]]
# ...
# Same as for [[file]], but on the command's stderr.
[[proc.stderr]]
# ...

# Changes metrics in response to HTTP requests made to a given endpoint.
# At least one of the .counter, .gauge, or .histogram sections must be set to
# configure metric(s) for this. Typically only one metric type would be set per
# HTTP endpoint, but this is not enforced.
#
# The HTTP request must be one of GET, POST, PUT.
#
# Form arguments are used to provide label values by name. Labels with an
# underscore prefix are reserved as special arguments, which currently include:
# _add, _set, _observe. Any other label names are rejected.
#
# Example of a GET request where counter, gauge and histogram are all present:
# http://localhost:9000/example_metric?foo=1&bar=thing&_add=3&_set=50.2&_observe=1.6
#
# This would alter metrics with the labels {foo=1,bar=thing}:
# * Increment the counter by 3
# * Set the gauge to 50.2
# * Record the value 1.6 in the histogram
[[httpexport]]
# the HTTP endpoint to receive requests on to alter the metric(s).
handlerpath = "/example_metric"
# names/keys for labels to differentiate metrics.
labelnames = ["foo", "bar"]
# counter is incremented when a request is received. The request may optionally
# contain an "_add" form argument to increment by a floating-point value other
# than 1.
[httpexport.counter] # CounterOpts
name = "example_counter"
help = "My example counter"
# gauge is set to a given value when a request is received. The request must
# contain a "_set" form argument for the floating-point value to set the gauge to.
# https://godoc.org/github.com/prometheus/client_golang/prometheus#GaugeOpts
[httpexport.gauge] # GaugeOpts
name = "example_gauge"
help = "My example gauge"
# histogram records an observation of a given value when a request is received.
# The request must contain a "_observe" form argument for the floating-point
# value to record.
# https://godoc.org/github.com/prometheus/client_golang/prometheus#HistogramOpts
[httpexport.histogram] # HistogramOpts
name = "example_histogram"
help = "My example histogram"
