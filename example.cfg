logpath = "warren.log"

# Configure the serving of metrics for Prometheus.
# See http://prometheus.io/ for the monitoring server that collects this data.
[prometheus]
# Serve on this HTTP URL path.
handlerpath = "/metrics"
# Serve on this host:port.
serveaddr = "localhost:9000"

[system]
filesystems = ["/", "/home"]
# Apply custom labels to the system collector.
[system.labels]
job = "hosts"
host = "myhostname"
# CPU data for the host.
[system.cpu]
# Should host_cpu_combined_seconds be output.
combined = true
# Should host_cpu_by_core_seconds be output.
bycore = true
# CPU states to output, allowed values:
# user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice
states = ["user", "system", "iowait"]

[[currentcost]]
device = "/dev/ttyUSB0"
# Apply custom labels to the CurrentCost collector.
[currentcost.labels]
job = "power"
[currentcost.sensor.1]
# Set label sensor="foo" on sensor 1, which would otherwise be sensor="1".
name = "foo"

# Equivalent of `tail -F` on a file, and counting various events (via matching
# re2 regexps against lines).
[[file]]
# The file to tail/follow.
file = "/var/log/syslog"
# Multiple Prometheus variables can be specified. name and help are required.
[[file.var]]
name = "cron_event_count"
help = "Crontab events (count)"
# names/keys for labels to differentiate events.
labelnames = ["user", "type"]
# Each variable can have multiple matchers for event types that contribute to
# it.
[[file.var.match]]
# The re2 pattern to match lines.
pattern = 'CROND\[[0-9]+\]: \((?P<user>[^)]+)\) (?P<type>[^ ]+)'
# values for labels on this matching event type. ${name} ${1} is expanded with
# matching subgroups in the pattern. See
# https://golang.org/pkg/regexp/#Regexp.Expand for details.
labelvalues = ["${user}", "${type}"]

# Reads stdout and/or stderr from a spawned process and counts events,
# similarly to [[file]].
[[proc]]
# The argv for the command, including the command name/path as the first item.
command = ["/usr/bin/journalctl", "--unit=someunit", "--follow", "--lines=0"]
# Optional directory to chdir to prior to execing the command.
dir = "/"
# If the process exits, retry starting it after this length of time. Defaults
# to 30s.
retryinterval = "5s"
# Same as for [[file.var]] on the command's stdout.
[[proc.stdout]]
# ...
# Same as for [[file.var]] on the command's stderr.
[[proc.stderr]]
# ...
